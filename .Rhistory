stats::sqrt(61)
sqrt(61)
round(sqrt(61), 0)
library(tidyverse)
library(readxl)
library(tm)
library(tidytext)
### Abrindo arquivo
setwd("/Users/lincoln/Library/CloudStorage/OneDrive-OiCorp/PCP_MATRIZ_sync/00 - Analises_estatisticas_R/SRD_pesquisa_celular")
Pesquisa_celular <- read_excel("Pesquisa celular.xlsx", sheet = "respostas_formulario_original")
View(Pesquisa_celular)
lista_pesquisa_nao <-
Pesquisa_celular %>%
filter(celular_empresa == "Não") %>%
as.list()
View(lista_pesquisa_nao)
lista_pesquisa_nao
# Pré-processamento do texto
corpus <- Corpus(VectorSource(lista_pesquisa_nao))
corpus
View(corpus)
View(Pesquisa_celular)
class(corpus)
corpus <- tm_map(corpus, content_transformer(tolower))  # Converter para minúsculas
corpus <- tm_map(corpus, removePunctuation)            # Remover pontuações
# Pré-processamento do texto
corpus <- Corpus(VectorSource(lista_pesquisa_nao))
corpus <- tm_map(corpus, content_transformer(tolower))  # Converter para minúsculas
corpus <- tm_map(corpus, removePunctuation)            # Remover pontuações
corpus <- tm_map(corpus, removeNumbers)                # Remover números
corpus <- tm_map(corpus, removeWords, stopwords("portuguese"))  # Remover stopwords
corpus <- tm_map(corpus, stripWhitespace)              # Remover espaços em branco desnecessários
# Criar a matriz de termos do documento (Bag of Words)
dtm <- DocumentTermMatrix(corpus)
dtm
View(dtm)
# Converter a DTM em um data frame
dtm_df <- as.data.frame(as.matrix(dtm))
dtm_df
dtm_df$total <- rowSums(dtm_df)  # Adicionar uma coluna com a contagem total de palavras
dtm_df
# Ordenar as palavras pela contagem total
dtm_df <- dtm_df[order(dtm_df$total, decreasing = TRUE), ]
dtm_df
# Plotar as palavras mais frequentes
library(ggplot2)
# Número de palavras para exibir no gráfico (altere conforme necessário)
num_palavras <- 80
# Converter a DTM em um formato tidy
dtm_tidy <- tidy(dtm)
dtm_tidy
top_palavras <- dtm_tidy %>%
group_by(term) %>%
summarize(total = sum(count)) %>%
top_n(num_palavras, total) %>%
arrange(desc(total))
top_palavras
# Índices das linhas que você deseja excluir
linhas_para_excluir <- c(1, 2, 4, 7, 10, 17, 20, 22, 23, 37, 38, 46)
# Excluir as linhas especificadas do dataframe
top_palavras <- top_palavras[-linhas_para_excluir, ]
top_palavras
# Plotar o gráfico de barras
ggplot(top_palavras[1:20,], aes(x = reorder(term, total), y = total)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(x = "Palavras", y = "Frequência", title = "Top Palavras no Bag of Words") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(wordcloud2)
# Converter top_palavras para um formato adequado para wordcloud2
# Aqui, assume-se que top_palavras tem as colunas 'term' e 'total' representando as palavras e suas frequências
top_palavras <- top_palavras[order(-top_palavras$total), ]  # Ordenar por frequência (do maior para o menor)
top_palavras <- top_palavras[1:100, ]  # Selecionar as 100 palavras mais frequentes
# Criar a nuvem de palavras
wordcloud2(data = top_palavras, size = 1, shape = "cloud")
top_palavras
# Criar a nuvem de palavras
wordcloud2(data = top_palavras, size = 1, shape = "cloud")
# Criar a nuvem de palavras
wordcloud2(data = top_palavras, size = 1, shape = "cloud")
top_palavras
top_palavras <- dtm_tidy %>%
group_by(term) %>%
summarize(total = sum(count)) %>%
top_n(num_palavras, total) %>%
arrange(desc(total))
top_palavras
library(wordcloud2)
# Criar a nuvem de palavras
wordcloud2(data = top_palavras, size = 1, shape = "cloud")
lista_pesquisa_nao$motivo
barplot(
colSums(prop.table(sentimentos_df[, 9:10])),
space = 0.2,
horiz = FALSE,
las = 1,
cex.names = 0.7,
col = brewer.pal(n = 8, name = "Set3"),
main = "Sentimento relacionado
Ao uso do celular corporativo",
#sub = "Análise realizada por Diana Rebelo Rodriguez",
xlab="emoções", ylab = NULL)
install.packages("syuzhet")
library(syuzhet)
install.packages("RColorBrewer")
library(RColorBrewer)
texto_palavras <- get_tokens(lista_pesquisa_nao$motivo)
oracoes_vetor <- get_sentences(texto_palavras)
sentimentos_df <- get_nrc_sentiment(texto_palavras, lang="portuguese")
head(sentimentos_df)
summary(sentimentos_df)
## Renomeando as colunas
colnames(sentimentos_df) <- c("Raiva", "Ansiedade", "Desgosto", "Medo", "Alegria", "Tristeza", "Surpresa", "Confiança", "Negativo", "Positivo")
barplot(
colSums(prop.table(sentimentos_df[, 9:10])),
space = 0.2,
horiz = FALSE,
las = 1,
cex.names = 0.7,
col = brewer.pal(n = 8, name = "Set3"),
main = "Sentimento relacionado
Ao uso do celular corporativo",
#sub = "Análise realizada por Diana Rebelo Rodriguez",
xlab="emoções", ylab = NULL)
barplot(
colSums(prop.table(sentimentos_df[, 1:8])),
space = 0.2,
horiz = FALSE,
las = 1,
cex.names = 0.7,
col = brewer.pal(n = 8, name = "Set3"),
main = "Emoções relacionadas
Ao uso do celular corporativo",
#sub = "Análise realizada por Diana Rebelo Rodriguez",
xlab="emoções", ylab = NULL)
library(tidyverse)
install.packages("readr")
library(readr)
#### Importando os dados ####
download.file("https://raw.githubusercontent.com/dianarebelo/analise_de_sentimentos/main/analise_de_sentimentos.csv", "analise_de_sentimentos.csv")
#### Importando os dados ####
url <- "https://github.com/lincolnsotto/analise_de_sentimentos/blob/5dbf60427c107a70a5561748d31ea9ebc8e3295d/texto_feliz.txt"""
#### Importando os dados ####
url <- "https://github.com/lincolnsotto/analise_de_sentimentos/blob/5dbf60427c107a70a5561748d31ea9ebc8e3295d/texto_feliz.txt"
#### Importando os dados ####
url <- "https://github.com/lincolnsotto/analise_de_sentimentos/blob/5dbf60427c107a70a5561748d31ea9ebc8e3295d/texto_feliz.txt"
name <- "texto_feliz.txt"
download.file(url,name)
#### Importando os dados ####
url <- "https://github.com/lincolnsotto/analise_de_sentimentos/blob/5dbf60427c107a70a5561748d31ea9ebc8e3295d/texto_feliz.txt"
name <- "texto_feliz.txt"
download.file(url,name)
#### Importando os dados ####
url <- "https://github.com/lincolnsotto/analise_de_sentimentos/blob/main/texto_feliz.txt"
name <- "texto_feliz.txt"
download.file(url,name)
#### Importando os dados ####
url <- "https://raw.githubusercontent.com/lincolnsotto/analise_de_sentimentos/main/texto_feliz.txt?token=GHSAT0AAAAAACMUHO26Y556T4MS46CFP5EOZOFIDXA"
name <- "texto_feliz.txt"
download.file(url,name)
texto_feliz <- download.file(url,name)
texto_feliz
#### Importando os dados ####
url <- "https://raw.githubusercontent.com/lincolnsotto/analise_de_sentimentos/texto_feliz.txt"
name <- "texto_feliz.txt"
texto_feliz <- download.file(url,name)
#### Importando os dados ####
url <- "https://raw.githubusercontent.com/lincolnsotto/analise_de_sentimentos/texto_feliz.txt"
name <- "texto_feliz.txt"
texto_feliz <- download.file(url,name)
#### Importando os dados ####
url <- "https://raw.githubusercontent.com/lincolnsotto/analise_de_sentimentos/texto_feliz.txt"
name <- "texto_feliz.txt"
texto_feliz <- download.file(url,name)
#### Importando os dados ####
url <- "https://github.com/lincolnsotto/analise_de_sentimentos/blob/5dbf60427c107a70a5561748d31ea9ebc8e3295d/texto_feliz.txt"
name <- "texto_feliz.txt"
texto_feliz <- download.file(url,name)
texto_feliz
#### Importando os dados ####
url <- "https://raw.githubusercontent.com/lincolnsotto/analise_de_sentimentos/5dbf60427c107a70a5561748d31ea9ebc8e3295d/texto_feliz.txt"
name <- "texto_feliz.txt"
texto_feliz <- download.file(url,name)
texto_feliz
load("texto_feliz.txt")
load(texto_feliz.txt)
load(texto_feliz)
texto_feliz <- download.file(url,name)
load("texto_feliz")
texto_feliz <- read_file("texto_feliz.txt")
texto_feliz
#### Criando os tokens ####
texto_palavras <- get_tokens(texto_feliz)
texto_palavras
oracoes_vetor <- get_sentences(texto_palavras)
oracoes_vetor
sentimentos_df <- get_nrc_sentiment(texto_palavras, lang="portuguese")
head(sentimentos_df)
summary(sentimentos_df)
## Renomeando as colunas
colnames(sentimentos_df) <- c("Raiva", "Ansiedade", "Desgosto", "Medo", "Alegria", "Tristeza", "Surpresa", "Confiança", "Negativo", "Positivo")
barplot(
colSums(prop.table(sentimentos_df[, 9:10])),
space = 0.2,
horiz = FALSE,
las = 1,
cex.names = 0.7,
col = brewer.pal(n = 8, name = "Set3"),
main = "Sentimento relacionado
Ao uso do celular corporativo",
#sub = "Análise realizada por Diana Rebelo Rodriguez",
xlab="emoções", ylab = NULL)
barplot(
colSums(prop.table(sentimentos_df[, 1:8])),
space = 0.2,
horiz = FALSE,
las = 1,
cex.names = 0.7,
col = brewer.pal(n = 8, name = "Set3"),
main = "Emoções relacionadas
Ao uso do celular corporativo",
#sub = "Análise realizada por Diana Rebelo Rodriguez",
xlab="emoções", ylab = NULL)
#### Criando os tokens ####
texto_palavras <- get_tokens(texto_feliz)
texto_palavras
oracoes_vetor
#### Criando os tokens ####
texto_palavras <- get_tokens(texto_feliz)
sentimentos_df <- get_nrc_sentiment(texto_palavras, lang="portuguese")
head(sentimentos_df)
summary(sentimentos_df)
sentimentos_df
View(sentimentos_df)
texto_palavras
## Juntando os vetores classificados com as palavras originais
sentimentos_df2 <- cbind(texto_palavras, sentimentos_df)
writexl::write_xlsx(sentimentos_df2, "sentimentos_words.xlsx")
#### Importando os dados ####
url <- "https://raw.githubusercontent.com/lincolnsotto/analise_de_sentimentos/5dbf60427c107a70a5561748d31ea9ebc8e3295d/texto_feliz.txt"
name <- "texto_feliz.txt"
texto_feliz <- download.file(url,name)
texto_feliz <- read_file("texto_feliz.txt")
#### Criando os tokens ####
texto_palavras <- get_tokens(texto_feliz)
#### Importando os dados ####
url <- "https://raw.githubusercontent.com/lincolnsotto/analise_de_sentimentos/5dbf60427c107a70a5561748d31ea9ebc8e3295d/texto_feliz.txt"
name <- "texto_feliz.txt"
df <- download.file(url,name)
df <- read_file("texto_feliz.txt")
#### Criando os tokens ####
texto_palavras <- get_tokens(df)
sentimentos_df <- get_nrc_sentiment(texto_palavras, lang="portuguese")
View(sentimentos_df)
head(sentimentos_df)
summary(sentimentos_df)
## Juntando os vetores classificados com as palavras originais
sentimentos_df2 <- cbind(texto_palavras, sentimentos_df)
View(sentimentos_df2)
View(sentimentos_df)
get_sentiment_dictionary('nrc', language = "portuguese")
nrc <- get_sentiment_dictionary('nrc', language = "portuguese")
View(nrc)
filter(nrc == "amor")
filter(nrc$word == "amor")
nrc %>%
filter(word == "feliz")
nrc %>%
filter(word == "amor")
nrc %>%
filter(word == "tarde")
barplot(
colSums(prop.table(sentimentos_df[, 9:10])),
space = 0.2,
horiz = FALSE,
las = 1,
cex.names = 0.7,
col = brewer.pal(n = 8, name = "Set3"),
main = "Sentimento relacionado
Ao uso do celular corporativo",
#sub = "Análise realizada por Diana Rebelo Rodriguez",
xlab="emoções", ylab = NULL)
?utils
?"utils"""
?"utils"
help = "utils"
?syuzhet
#### Pacotes necessários ####
#install.packages("syuzhet")
#install.packages("RColorBrewer")
#install.packages("tidyverse")
#install.packages("readr")
library(syuzhet)
?syuzhet
??syuzhet
barplot(
colSums(prop.table(sentimentos_df[, 9:10])),
space = 0.2,
horiz = FALSE,
las = 1,
cex.names = 0.7,
col = brewer.pal(n = 8, name = "Set3"),
main = "Sentimento relacionado
Ao uso do celular corporativo",
#sub = "Análise realizada por Diana Rebelo Rodriguez",
xlab="emoções", ylab = NULL)
######### ANÁLISE DE SENTIMENTOS #########
#### Pacotes necessários ####
#install.packages("syuzhet")
#install.packages("RColorBrewer")
#install.packages("tidyverse")
#install.packages("readr")
library(syuzhet)
library(RColorBrewer)
library(tidyverse)
library(readr)
#### Importando os dados ####
url <- "https://raw.githubusercontent.com/lincolnsotto/analise_de_sentimentos/5dbf60427c107a70a5561748d31ea9ebc8e3295d/texto_feliz.txt"
name <- "texto_feliz.txt"
df <- utils::download.file(url,name)
df <- readr::read_file("texto_feliz.txt")
#### Criando os tokens ####
texto_palavras <- get_tokens(df)
sentimentos_df <- get_nrc_sentiment(texto_palavras, lang="portuguese")
head(sentimentos_df)
summary(sentimentos_df)
setwd("~/Documents/GitHub/analise_de_sentimentos")
## Juntando os vetores classificados com as palavras originais
sentimentos_df2 <- cbind(texto_palavras, sentimentos_df)
writexl::write_xlsx(sentimentos_df2, "sentimentos_words.xlsx")
## Renomeando as colunas
colnames(sentimentos_df) <- c("Raiva", "Ansiedade", "Desgosto", "Medo", "Alegria", "Tristeza", "Surpresa", "Confiança", "Negativo", "Positivo")
barplot(
colSums(prop.table(sentimentos_df[, 9:10])),
space = 0.2,
horiz = FALSE,
las = 1,
cex.names = 0.7,
col = brewer.pal(n = 8, name = "Set3"),
main = "Sentimento relacionado
Ao uso do celular corporativo",
#sub = "Análise realizada por Diana Rebelo Rodriguez",
xlab="emoções", ylab = NULL)
barplot(
colSums(prop.table(sentimentos_df[, 9:10])),
space = 0.2,
horiz = FALSE,
las = 1,
cex.names = 0.7,
col = brewer.pal(n = 8, name = "Set3"),
main = "Sentimento relacionado
Ao texto gerado via ChatGPT",
#sub = "Análise realizada por Diana Rebelo Rodriguez",
xlab="emoções", ylab = NULL)
barplot(
colSums(prop.table(sentimentos_df[, 1:8])),
space = 0.2,
horiz = FALSE,
las = 1,
cex.names = 0.7,
col = brewer.pal(n = 8, name = "Set3"),
main = "Emoções relacionadas
Ao texto gerado via ChatGPT",
#sub = "Análise realizada por Diana Rebelo Rodriguez",
xlab="emoções", ylab = NULL)
barplot(
colSums(prop.table(sentimentos_df[, 9:10])),
space = 0.2,
horiz = FALSE,
las = 1,
cex.names = 0.7,
col = brewer.pal(n = 8, name = "Set3"),
main = "Emoção relacionada
Ao texto gerado via ChatGPT",
#sub = "Análise realizada por Diana Rebelo Rodriguez",
xlab="emoções", ylab = NULL)
barplot(
colSums(prop.table(sentimentos_df[, 1:8])),
space = 0.2,
horiz = FALSE,
las = 1,
cex.names = 0.7,
col = brewer.pal(n = 8, name = "Set3"),
main = "Emoções relacionadas
Ao texto gerado via ChatGPT",
#sub = "Análise realizada por Diana Rebelo Rodriguez",
xlab="emoções", ylab = NULL)
sub = "Texto gerado via ChatGPT"",
sub = "Texto gerado via ChatGPT,
barplot(
colSums(prop.table(sentimentos_df[, 9:10])),
space = 0.2,
horiz = FALSE,
las = 1,
cex.names = 0.7,
col = brewer.pal(n = 8, name = "Set3"),
main = "Sentimento relacionado
Ao texto gerado via ChatGPT",
sub = "Texto gerado via ChatGPT",
xlab="emoções", ylab = NULL)
barplot(
colSums(prop.table(sentimentos_df[, 9:10])),
space = 0.2,
horiz = FALSE,
las = 1,
cex.names = 0.7,
col = brewer.pal(n = 8, name = "Set3"),
main = "Sentimento relacionado ao Texto",
sub = "Texto gerado via ChatGPT",
xlab="emoções", ylab = NULL)
barplot(
colSums(prop.table(sentimentos_df[, 9:10])),
space = 0.2,
horiz = FALSE,
las = 1,
cex.names = 0.7,
col = brewer.pal(n = 8, name = "Set3"),
main = "Sentimento relacionado ao Texto",
sub = "By ChatGPT",
xlab="emoções", ylab = NULL)
barplot(
colSums(prop.table(sentimentos_df[, 9:10])),
space = 0.2,
horiz = FALSE,
las = 1,
cex.names = 0.7,
col = brewer.pal(n = 8, name = "Set3"),
main = "Sentimento relacionado ao contexto",
sub = "Texto by ChatGPT",
xlab="emoções", ylab = NULL)
barplot(
colSums(prop.table(sentimentos_df[, 9:10])),
space = 0.2,
horiz = FALSE,
las = 1,
cex.names = 0.7,
col = brewer.pal(n = 8, name = "Set3"),
main = "Sentimento relacionado ao contexto",
sub = "Texto by ChatGPT")
barplot(
colSums(prop.table(sentimentos_df[, 1:8])),
space = 0.2,
horiz = FALSE,
las = 1,
cex.names = 0.7,
col = brewer.pal(n = 8, name = "Set3"),
main = "Emoções relacionadas
Ao texto gerado via ChatGPT",
main = "Emoções relacionadas ao contexto",
sub = "Texto by ChatGPT")
barplot(
colSums(prop.table(sentimentos_df[, 1:8])),
space = 0.2,
horiz = FALSE,
las = 1,
cex.names = 0.7,
col = brewer.pal(n = 8, name = "Set3"),
main = "Emoções relacionadas
Ao texto gerado via ChatGPT",
main = "Emoções relacionadas ao contexto",
sub = "Texto by ChatGPT")
barplot(
colSums(prop.table(sentimentos_df[, 1:8])),
space = 0.2,
horiz = FALSE,
las = 1,
cex.names = 0.7,
col = brewer.pal(n = 8, name = "Set3"),
main = "Emoções relacionada ao contexto",
sub = "Texto by ChatGPT")
nuvem_emocoes_vetor <- c(
paste(texto_palavras[sentimentos_df$Negativo> 0], collapse = " "),
paste(texto_palavras[sentimentos_df$Positivo > 0], collapse = " "))
nuvem_emocoes_vetor
nuvem_emocoes_vetor <- c(
paste(texto_palavras[sentimentos_df$Negativo> 0], collapse = " "),
paste(texto_palavras[sentimentos_df$Positivo> 0], collapse = " "))
nuvem_corpus <- Corpus(VectorSource(nuvem_emocoes_vetor))
View(nuvem_corpus)
nuvem_tdm <- TermDocumentMatrix(nuvem_corpus)
nuvem_tdm <- as.matrix(nuvem_tdm)
head(nuvem_tdm)
colnames(nuvem_tdm) <- c('Negativo', 'Positivo')
comparison.cloud(nuvem_tdm, random.order = FALSE,
colors = c("green", "red", "orange", "blue"),
title.size = 1, max.words = 50, scale = c(2.5, 1), rot.per = 0.4)
install.packages("wordcloud")
libraru(wordcloud)
library(wordcloud)
comparison.cloud(nuvem_tdm, random.order = FALSE,
colors = c("green", "red", "orange", "blue"),
title.size = 1, max.words = 50, scale = c(2.5, 1), rot.per = 0.4)
colors = c("green", "red"),
colnames(nuvem_tdm) <- c('Negativo', 'Positivo')
comparison.cloud(nuvem_tdm, random.order = FALSE,
colors = c("green", "red"),
title.size = 1, max.words = 50, scale = c(2.5, 1), rot.per = 0.4)
comparison.cloud(nuvem_tdm, random.order = FALSE,
colors = c("red", "green"),
title.size = 1, max.words = 50, scale = c(2.5, 1), rot.per = 0.4)
## Gerando a nuvem de palavras
nuvem_emocoes_vetor <- c(
paste(texto_palavras[sentimentos_df$Negativo> 0], collapse = " "),
paste(texto_palavras[sentimentos_df$Positivo> 0], collapse = " "))
comparison.cloud(nuvem_tdm, random.order = FALSE,
colors = c("red", "green"),
title.size = 1, max.words = 100, scale = c(2.5, 1), rot.per = 0.4)
comparison.cloud(nuvem_tdm, random.order = FALSE,
colors = c("red", "green"),
title.size = 1, max.words = 100, scale = c(1, 0.5), rot.per = 0.4)
comparison.cloud(nuvem_tdm, random.order = FALSE,
colors = c("red", "green"),
title.size = 1, max.words = 100, scale = c(3.5, 2), rot.per = 0.4)
